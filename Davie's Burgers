Write the following queries:
1.
Start by getting a feel for the orders table:

SELECT *
FROM orders
LIMIT 10;
What are the column names?

Using LIMIT caps the number of rows in the result.

It is a simple way to keep queries from taking too long to run if you are dealing with a big dataset.

The orders table has the following column names:

id
user_id
order_date
restaurant_id
item_name
special_instructions
2.
How recent is this data?

Use DISTINCT to find out all the unique order_date values in this table.

SELECT DISTINCT order_date
FROM orders;
If you want to go a step further, you can add an ORDER BY to sort the dates:

SELECT DISTINCT order_date
FROM orders
ORDER BY order_date DESC;
It looks like this data is from May and June of 2017.

3.
The special_instructions column stores the data where Davie’s Burgers customers leave a note for the kitchen or the delivery.

Instead of selecting all the columns using *, write a query that selects only the special_instructions column.

Limit the result to 20 rows.

SELECT special_instructions
FROM orders
LIMIT 20;
There appears to be incongruous spacing in the result. But it is not a bug! They are actually NULL or empty values.

4.
There seem to be a lot of empty values in that column. That is because customers sometimes leave the notes section blank.

Can you edit the query so that we are only returning the special instructions that are not empty?

IS NOT NULL condition is used in SQL to test for a non-empty value.

SELECT special_instructions
FROM orders
WHERE special_instructions IS NOT NULL;
5.
Let’s go even further and sort the instructions in alphabetical order (A-Z).

SELECT special_instructions
FROM orders
WHERE special_instructions IS NOT NULL
ORDER BY special_instructions;
Sorting in ascending order is the default, but if you want to make it more explicit, you can add the ASC keyword:

SELECT special_instructions
FROM orders
WHERE special_instructions IS NOT NULL
ORDER BY special_instructions ASC;
6.
Awesome! Now we have a good idea of the list.

Let’s search for special instructions that have the word ‘sauce’.

Are there any funny or interesting ones?

The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

SELECT special_instructions
FROM orders
WHERE special_instructions LIKE '%sauce%';
7.
Let’s search for special instructions that have the word ‘door’.

Any funny or interesting ones?

SELECT special_instructions
FROM orders
WHERE special_instructions LIKE '%door%';
Any funny or interesting ones?

8.
Let’s search for special instructions that have the word ‘box’.

Any funny or interesting ones?

SELECT special_instructions
FROM orders
WHERE special_instructions LIKE '%box%';
9.
Wow, some of these are marketing gold! But what are their order numbers?

Instead of just returning the special instructions, also return their order ids.

For more readability:

Rename id as ‘#’
Rename special_instructions as ‘Notes’
Add a new column:

SELECT id,
   special_instructions
FROM orders
WHERE special_instructions LIKE '%box%';
Rename both columns:

SELECT id AS '#',
   special_instructions AS 'Notes'
FROM orders
WHERE special_instructions LIKE '%box%';
10.
Great work! You have found special instructions that are funny and ridiculous - the perfect combo for a Davie’s Burgers tagline.

The marketing agency took it from there and worked out a subway ad in no time!

### Solutions

SELECT *
FROM orders
LIMIT 10;

SELECT DISTINCT order_date
FROM orders;

SELECT special_instructions
FROM orders
LIMIT 20;

SELECT special_instructions
FROM orders
WHERE special_instructions IS NOT NULL;

SELECT special_instructions
FROM orders
WHERE special_instructions IS NOT NULL
ORDER BY special_instructions ASC;

SELECT special_instructions
FROM orders
WHERE special_instructions LIKE '%sauce%';

SELECT special_instructions
FROM orders
WHERE special_instructions LIKE '%door%';

SELECT special_instructions
FROM orders
WHERE special_instructions LIKE '%box%';

SELECT id AS '#',
   special_instructions AS 'Notes'
FROM orders
WHERE special_instructions LIKE '%box%';
